#lang racket
(require "mk.rkt")

(define apply-Go
  (lambda (G e t)
    (fresh (a G^)
      (== `(,a . ,G^) G)
      (fresh (aa da)
        (== `(,aa . ,da) a)
        (conde
          ((== aa e) (== da t))
          ((=/= aa e) (apply-Go G^ e t)))))))

(define !-
  (lambda (G e t)
    (conde
      ((numbero e) (== 'Nat t))
      ((== t 'Bool)
       (conde
         ((== #t e))
         ((== #f e))))
      ((fresh (ne1 ne2)
         (== `(+ ,ne1 ,ne2) e)
         (== 'Nat t)
         (!- G ne1 'Nat)
         (!- G ne2 'Nat)))
      ((fresh (ne1 ne2)
         (== `(* ,ne1 ,ne2) e)
         (== 'Nat t)
         (!- G ne1 'Nat)
         (!- G ne2 'Nat)))
      ((fresh(ne1)
         (== `(zero? ,ne1) e)
         (== t 'Bool)
         (!- G ne1 'Nat)))
      ((fresh(ne1)
         (== `(sub1 ,ne1) e)
         (== t 'Nat)
         (!- G ne1 'Nat)))
      ((fresh(ne1)
         (== `(not ,ne1) e)
         (== t 'Bool)
         (!- G ne1 'Bool)))
       ((fresh(ne1)
         (== `(fix ,ne1) e)
         (!- G ne1 `(,t -> ,t))))
       ((fresh(ne1 ne2 t1 t2)
              (== `(cons ,ne1 ,ne2) e)
              (== t `(pairof ,t1 ,t2))
              (!- G ne1 t1)
              (!- G ne2 t2)))
       ((fresh(val ta tb)
              (== `(car ,val) e)
              (== t ta)
              (!- G val `(pairof ,ta ,tb))))
       ((fresh(val ta tb)
              (== `(cdr ,val) e)
              (== t tb)
              (!- G val `(pairof ,ta ,tb))))
      ((fresh (teste anse elsee)
        (== `(if ,teste ,anse ,elsee) e)
        (!- G teste 'Bool)
        (!- G anse t)
        (!- G elsee t)))
      ((symbolo e) (apply-Go G e t))
      ;Dessert
      #|((fresh (trand body x rand)
              (== `(let ([,x ,rand]) ,body) e)
              (!- G rand trand)
              (!- `((,x . trand) . ,G) body t)))|# ;Couldn't get this to work...
      ((fresh (x b)
        (== `(lambda (,x) ,b) e)
        (symbolo x)
        (fresh (tx tb)          
          (== `(,tx -> ,tb) t)
          (!- `((,x . ,tx) . ,G) b tb))))
      ((fresh (e1 arg)
        (== `(,e1 ,arg) e)
        (fresh (targ)
          (!- G e1 `(,targ -> ,t))
          (!- G arg targ)))))))



